import json
import matplotlib.pyplot as plt
import os

# Configuration
# These should match the 'threadCounts' in your Go benchmark program
THREADS = [1, 2, 4, 6, 8, 10, 12, 14, 16]
# We now have a single label for the benchmark type
BENCHMARK_LABEL = "OpenMP Ray Tracing"

# Create the 'media' folder if it doesn't exist
os.makedirs("media", exist_ok=True)

# Load the results from the JSON file generated by the Go program
try:
    with open("results.json", "r") as f:
        results = json.load(f)
except FileNotFoundError:
    print("Error: results_openmp_ray.json not found. Please run the Go benchmark first.")
    exit()
except json.JSONDecodeError:
    print("Error: Could not decode JSON from results_openmp_ray.json. Check file integrity.")
    exit()

def generate_table_and_plot(use_perf=False):
    # The header for the Markdown table should now just refer to "Benchmark Type"
    header = "| Benchmark Type | " + " | ".join(str(t) for t in THREADS) + " |"
    separator = "|" + "-" * 16 + "|" + "|".join(["----"] * len(THREADS)) + "|" # Adjusted separator length

    rows = []
    plot_data_values = [] # To store the y-values for the plot

    # The Go program puts all results under "OpenMP_RayTracing" key
    thread_data = results.get("OpenMP_RayTracing", {})

    # Start the single row for our table
    row_string = f"| {BENCHMARK_LABEL} "
    for t in THREADS:
        # Get the value for the current thread count, converting the int 't' to string for JSON key lookup
        val = thread_data.get(str(t))
        if val is not None:
            # val is already in milliseconds. Convert to performance (1/ms) if requested.
            display_val = f"{(1000 / val):.3f}" if use_perf else f"{val}"
            row_string += f"| {display_val} "
            plot_data_values.append(1000 / val if use_perf else val)
        else:
            row_string += "| N/A " # Use "N/A" if data is missing for a thread count
            plot_data_values.append(None) # Append None for missing data in plot
    row_string += "|"
    rows.append(row_string)

    # ---
    ## Markdown Table Output
    # ---
    print("\n" + ("üìä **Performance Table (1/ms)**" if use_perf else "‚è±Ô∏è **Execution Time Table (ms)**"))
    print(header)
    print(separator)
    for row in rows:
        print(row)

    # ---
    ## Generate Plot
    # ---
    plt.figure(figsize=(10, 6))

    # Filter out None values for plotting
    x_coords = [t for t, y in zip(THREADS, plot_data_values) if y is not None]
    y_coords = [y for y in plot_data_values if y is not None]

    plt.plot(x_coords, y_coords, marker='o', label=BENCHMARK_LABEL)

    plt.xlabel("Number of threads")
    ylabel = "Performance (1/ms)" if use_perf else "Execution time (ms)"
    plt.ylabel(ylabel)
    # plt.title("OpenMP Ray Tracing - " + ("Performance vs. Threads" if use_perf else "Execution Time vs. Threads"))
    plt.xticks(THREADS) # Ensure all thread counts are visible on x-axis
    plt.grid(True, linestyle="--", alpha=0.5)
    plt.legend()
    plt.tight_layout()

    output_file = "media/openmp_ray_performance.png" if use_perf else "media/openmp_ray_exec_time.png"
    plt.savefig(output_file)
    print(f"‚úÖ Graph saved to: **{output_file}**\n")

# Generate both tables and graphs
generate_table_and_plot(use_perf=False)
generate_table_and_plot(use_perf=True)